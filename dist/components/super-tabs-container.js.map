{"version":3,"file":"super-tabs-container.js","sourceRoot":"","sources":["../../src/components/super-tabs-container.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Output,\r\n  Renderer2,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { Platform } from 'ionic-angular';\r\n\r\nimport { SuperTabsPanGesture } from '../super-tabs-pan-gesture';\r\nimport { SuperTabsConfig } from './super-tabs';\r\n\r\n@Component({\r\n  selector: 'super-tabs-container',\r\n  template: '<div #container><ng-content></ng-content></div>',\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class SuperTabsContainer implements AfterViewInit, OnDestroy {\r\n\r\n  /**\r\n   * Component configuration\r\n   * @type {SuperTabsConfig}\r\n   */\r\n  @Input()\r\n  config: SuperTabsConfig;\r\n\r\n  /**\r\n   * Number of tabs\r\n   * @type {number}\r\n   */\r\n  @Input()\r\n  tabsCount = 0;\r\n\r\n  /**\r\n   * Selected tab index\r\n   * @type {number}\r\n   */\r\n  @Input()\r\n  selectedTabIndex: number;\r\n\r\n  /**\r\n   * Notifies when a tab is selected\r\n   * @type {EventEmitter<Object>}\r\n   */\r\n  @Output()\r\n  tabSelect: EventEmitter<{ index: number; changed: boolean; }> = new EventEmitter<{ index: number; changed: boolean; }>();\r\n\r\n  /**\r\n   * Notifies when the container is being dragged\r\n   * @type {EventEmitter<TouchEvent>}\r\n   */\r\n  @Output()\r\n  onDrag: EventEmitter<TouchEvent> = new EventEmitter<TouchEvent>();\r\n\r\n  // View bindings\r\n\r\n  /**\r\n   * Container position\r\n   * @type {number}\r\n   */\r\n  containerPosition = 0;\r\n\r\n  // View children\r\n\r\n  /**\r\n   * The container wrapping all the tabs\r\n   */\r\n  @ViewChild('container')\r\n  container: ElementRef;\r\n\r\n  /**\r\n   * Single tab width\r\n   * @type {number}\r\n   */\r\n  tabWidth = 0;\r\n\r\n  /**\r\n   * Container width (sum of tab widths)\r\n   * @type {number}\r\n   */\r\n  containerWidth = 0;\r\n\r\n\r\n  // Animation stuff\r\n\r\n  /**\r\n   * Minimum position on x-axis that the container can be at\r\n   */\r\n  private minPosX: number;\r\n\r\n  /**\r\n   * Maximum position on x-axis that the container can be at\r\n   */\r\n  private maxPosX: number;\r\n\r\n  /**\r\n   * Pan gesture controller\r\n   */\r\n  private gesture: SuperTabsPanGesture;\r\n\r\n  /**\r\n   * Boolean indicating whether swiping is globally enabled\r\n   * @type {boolean}\r\n   */\r\n  private globalSwipeEnabled: boolean = true;\r\n\r\n  /**\r\n   * Set of booleans to indicate whether swiping is enabled on each tab\r\n   * @type {{}}\r\n   */\r\n  private swipeEnabledPerTab: { [index: number]: boolean } = {};\r\n\r\n  constructor(private el: ElementRef,\r\n              private rnd: Renderer2,\r\n              private plt: Platform,\r\n              private ngZone: NgZone) {\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.init();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.gesture && this.gesture.destroy();\r\n  }\r\n\r\n  /**\r\n   * Enable or disable swiping globally\r\n   * @param enable {boolean} set to true to enable\r\n   */\r\n  enableTabsSwipe(enable: boolean) {\r\n    this.globalSwipeEnabled = enable;\r\n  }\r\n\r\n  /**\r\n   * Enable or disable swiping when a tab is selected\r\n   * @param tabIndex {number} tab index\r\n   * @param enable {boolean} set to true to enable\r\n   */\r\n  enableTabSwipe(tabIndex: number, enable: boolean) {\r\n    this.swipeEnabledPerTab[tabIndex] = enable;\r\n  }\r\n\r\n  refreshDimensions() {\r\n    this.calculateContainerWidth();\r\n    this.setContainerWidth();\r\n    this.refreshMinMax();\r\n  }\r\n\r\n  getNativeElement(): HTMLElement {\r\n    return this.el.nativeElement;\r\n  }\r\n\r\n  private init() {\r\n\r\n    this.refreshDimensions();\r\n\r\n    this.gesture = new SuperTabsPanGesture(this.plt, this.config, this.container.nativeElement, this.rnd);\r\n\r\n    this.gesture.onMove = (delta: number) => {\r\n      if (this.globalSwipeEnabled === false) return;\r\n      if (this.swipeEnabledPerTab[this.selectedTabIndex] === false) return;\r\n      if ((this.containerPosition === this.maxPosX && delta >= 0) || (this.containerPosition === this.minPosX && delta <= 0)) return;\r\n      this.containerPosition += delta;\r\n      this.plt.raf(() => {\r\n        this.onDrag.emit();\r\n        this.moveContainer();\r\n      });\r\n    };\r\n\r\n    this.gesture.onEnd = (shortSwipe: boolean, shortSwipeDelta?: number) => {\r\n      if (this.globalSwipeEnabled === false) return;\r\n      if (this.swipeEnabledPerTab[this.selectedTabIndex] === false) return;\r\n\r\n      // get tab index based on container position\r\n      let tabIndex = Math.round(this.containerPosition / this.tabWidth);\r\n\r\n      // handle short swipes\r\n      // only short swipe if we didn't change tab already in this gesture\r\n      (tabIndex === this.selectedTabIndex) && shortSwipe && ((shortSwipeDelta < 0 && tabIndex++) || (shortSwipeDelta > 0 && tabIndex--));\r\n\r\n      // get location based on tab index\r\n      const position = Math.max(this.minPosX, Math.min(this.maxPosX, tabIndex * this.tabWidth));\r\n\r\n      tabIndex = position / this.tabWidth;\r\n\r\n      // move container if we changed position\r\n      if (position !== this.containerPosition) {\r\n        this.plt.raf(() =>\r\n          this.moveContainer(true, position)\r\n            .then(() =>\r\n              this.ngZone.run(() => this.setSelectedTab(tabIndex))\r\n            )\r\n        );\r\n      } else this.setSelectedTab(tabIndex);\r\n\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Set the selected tab.\r\n   * Emits a tabSelect event with the tab index, and a boolean indicating whether the tab changed or not.\r\n   * @param index {number} tab index\r\n   */\r\n  private setSelectedTab(index: number) {\r\n    this.tabSelect.emit({ index, changed: index !== this.selectedTabIndex });\r\n    this.selectedTabIndex = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate the container's width.\r\n   * It's usually the number of tabs x tab width.\r\n   */\r\n  private calculateContainerWidth() {\r\n    this.containerWidth = this.tabWidth * this.tabsCount;\r\n  }\r\n\r\n  /**\r\n   * Set the container's width via CSS property\r\n   */\r\n  private setContainerWidth() {\r\n    this.rnd.setStyle(this.container.nativeElement, 'width', this.containerWidth + 'px');\r\n  }\r\n\r\n  /**\r\n   * Slide to a specific tab\r\n   * @param index {number} tab index\r\n   * @param [animate=true] {boolean} set to true to animate\r\n   */\r\n  slideTo(index: number, animate: boolean = true): void {\r\n    this.plt.raf(() => this.moveContainer(animate, index * this.tabWidth));\r\n  }\r\n\r\n  /**\r\n   * Moves the container to a specified position\r\n   * @param [animate=false] {boolean} set to true to animate\r\n   * @param [positionX] {number} position on x-axis\r\n   */\r\n  private async moveContainer(animate: boolean = false, positionX?: number) {\r\n    const el: HTMLElement = this.container.nativeElement;\r\n\r\n    if (animate) {\r\n\r\n      if (el.style[this.plt.Css.transform].indexOf('all') === -1) {\r\n        this.rnd.setStyle(el, this.plt.Css.transition, `all ${this.config.transitionDuration}ms ${this.config.transitionEase}`);\r\n      }\r\n\r\n      this.rnd.setStyle(el, this.plt.Css.transform, `translate3d(${-1 * positionX}px, 0, 0)`);\r\n\r\n      this.containerPosition = positionX;\r\n\r\n    } else {\r\n\r\n      if (positionX) {\r\n        this.containerPosition = positionX;\r\n      }\r\n\r\n      if (el.style[this.plt.Css.transform] !== 'initial') {\r\n        this.rnd.setStyle(el, this.plt.Css.transition, 'initial');\r\n      }\r\n\r\n      this.containerPosition = Math.max(this.minPosX, Math.min(this.maxPosX, this.containerPosition));\r\n\r\n      this.rnd.setStyle(el, this.plt.Css.transform, `translate3d(${-1 * this.containerPosition}px, 0, 0)`);\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refresh the min and max positions that the container can be at.\r\n   * The minimum position is always 0, the maximum position is the number of tabs x tab width.\r\n   */\r\n  private refreshMinMax(): void {\r\n    this.minPosX = 0;\r\n    this.maxPosX = (this.tabsCount - 1) * this.tabWidth;\r\n  }\r\n\r\n}\r\n"]}